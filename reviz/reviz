#!/usr/local/bin/ruby

# reviz is a CGI program which browse CVS repository like ViewCVS or cvsweb.

require 'reviz-conf.rb'

require 'cvs'
require 'cgi'
require 'html/template'

class SBuf
  def initialize
    @bufs = []
    @buf = []
  end

  def <<(string)
    @buf << string
    if 4096 <= @buf.length
      buf = @buf.slice!(0, @buf.length).join
      if i = @bufs.rindex(nil)
        @bufs[i] = @bufs[i+1..-1].join + buf
	@bufs.fill(nil, (i+1)..-1)
      else
        @bufs.unshift(@bufs.join + buf)
	@bufs.fill(nil, 1..-1)
      end
      #STDERR.print @bufs.collect {|s| s && s.length}.inspect, "\n"
    end
  end

  def each
    @bufs.each {|s| yield s if s}
    yield @buf.join
  end
end

class CGIBuffer
  def initialize(cgi)
    @cgi = cgi
    @buf = SBuf.new
    @options = {'type' => 'text/html'}
  end

  def [](k)
    return @options[k]
  end

  def []=(k, v)
    @options[k] = v
  end

  def print(*ss)
    ss.each {|s| @buf << s}
  end

  def printf(*ss)
    print sprintf(*ss)
  end

  def catch
    begin
      yield self
    rescue
      ex = $!
      @cgi.print @cgi.header('text/plain')
      @cgi.print ex.to_s, "\n"
      ex.backtrace.each {|s|
        @cgi.print s, "\n"
      }
      @cgi.print "\n"
      @buf.each {|s| @cgi.print s}
      return
    end

    @cgi.print @cgi.header(@options)
    @buf.each {|s| @cgi.print s}
  end
end

class ReViz
  StickyParameter = {
    'cvsroot' => CVSROOT_LIST[0][0],
    'hideattic' => nil,
    'sortby' => nil,
    'logsort' => nil,
    'diff_format' => nil,
    'only_with_tag' => nil,
  }

  def initialize
    @cgi = CGI.new
    @cgibuffer = CGIBuffer.new(@cgi)
  end

  def error(msg)
    @cgi.out("text/plain") {msg}
    exit 0
  end

  def init_cvsroot
    d = @cgi['cvsroot']
    if d.empty?
      cvsroot = CVSROOT_LIST[0][1]
    elsif (d = CVSROOT_LIST.assoc(d[0]))
      cvsroot = d[1]
    else
      error("unknown cvsroot")
    end
    @cvsroot = CVS.create(cvsroot)


    path_info = (@cgi.path_info || '/')
    path = []
    path_info.scan(/[^\/]+/) {|name|
      next if name == '.' || name == '..'
      path << name
    }

    @cvsdir = @cvsroot.top_dir
    @cvsfile = nil
    if path_info =~ /\/\z/
      path.each {|name| @cvsdir = @cvsdir.simple_dir(name)}
    else
      path[0..-2].each {|name| @cvsdir = @cvsdir.simple_dir(name)}
      @cvsfile = @cvsdir.simple_file(path[-1])
    end
  end

  def init_url
    @url_base = @cgi.script_name || 'reviz.cgi'
    @url_params = {}
    StickyParameter.each {|k,v|
      if @cgi.has_key? k
	@url_params[k] = @cgi[k][0]
      else
	@url_params[k] = v
      end
    }
  end

  def url(path_info, extra_params={}, fragment=nil)
    params = @url_params.dup
    if extra_params
      extra_params.each {|k,v|
	if v == nil
	  params.delete(k)
	else
	  params[k] = v
	end
      }
    end
    StickyParameter.each {|k,v|
      params.delete(k) if params[k] == v
    }

    result = @url_base.dup
    if path_info
      result << '/' << path_info
    end
    unless params.empty?
      result << '?' << params.keys.sort.collect {|k|
                         "#{k}=#{CGI::escape(params[k])}"
		       }.join('&')
    end
    if fragment != nil
      result << '#' << fragment
    end
    return result
  end

  def main
    @cgibuffer.catch {
      init_cvsroot
      init_url

      if !@cgi.path_info
        list_repository
      elsif @cvsfile
	if @cgi.has_key? 'rev'
	  view_checkout(CVS::Revision.create(@cgi['rev'][0]))
	elsif @cgi.has_key? 'annotate'
	  view_annotate(CVS::Revision.create(@cgi['annotate'][0]))
	else
	  view_log
	end
      else
	view_directory
      end
    }
  end

  def list_repository
    tmpl = HTML::Template.new("#{HTML_TEMPLATE_DIR}/list_repositories.html")
    n = tmpl.node('repository_list')
    CVSROOT_LIST.each {|name, *rest|
      n.param({'url'=>url('', {'cvsroot'=>name}),
               'repository_name'=>name})
    }
    @cgibuffer.print tmpl.output
  end

  def view_directory
    tmpl = HTML::Template.new("#{HTML_TEMPLATE_DIR}/view_directory.html")
    unless (listdir = @cvsdir.listdir).empty?
      n0 = tmpl.cond('directory')
      n = n0.node('directory_list')
      listdir.sort! {|a,b| a.path <=> b.path}
      listdir.each {|subdir|
        n.param({'url'=>url(subdir.path + '/'),
	         'name'=>subdir.path})
      }
      n0.expand
    end
    unless (listfile = @cvsdir.listfile).empty?
      n0 = tmpl.node('file')
      n = n0.node('file_list')
      listfile.sort! {|a,b| a.path <=> b.path}
      listfile.each {|file|
        n.param({'url'=>url(file.path),
	         'name'=>file.path})
      }
      n0.expand
    end
    @cgibuffer.print tmpl.output
  end

  def view_log
    tmpl = HTML::Template.new("#{HTML_TEMPLATE_DIR}/view_log.html")
    @cvsfile.parse_log(ViewLogVisitor.new {|args|
      expand_log(tmpl.node('log'), *args)
    })
    @cgibuffer.print tmpl.output
  end
  class ViewLogVisitor < CVS::Visitor
    def initialize(&block)
      @block = block
      @rev2sym = {}
      @rev2sym.default = [].freeze
    end
    def symbol(sym, rev)
      unless @rev2sym.has_key? rev
        @rev2sym[rev] = []
      end
      @rev2sym[rev] << sym
    end
    def delta_rlog(rev, locked_by, date, author, state,
                   add, del, branches, message)
      #p [rev, locked_by, date, author, state, add, del, branches, message]
      @block.call(rev, locked_by, date, author, state,
                  add, del, branches, message, @rev2sym[rev])
    end
  end

  def expand_log(node, rev, locked_by, date, author, state,
                add, del, branches, message, tags)
    n = node.node('tag_list')
    tags.each {|tag| n.param({'tag'=>tag})}

    node.param({
      'rev' => rev.to_s,
      'checkout_url' => url(@cvsfile.path, {'rev'=>rev.to_s}),
      'annotate_url' => url(@cvsfile.path, {'annotate'=>rev.to_s}),
      'date' => CGI::escapeHTML(date.to_s),
      'author' => CGI::escapeHTML(author),
      'message' => CGI::escapeHTML(message)
    })
  end

  def view_checkout(rev)
    tmpl = HTML::Template.new("#{HTML_TEMPLATE_DIR}/view_checkout.html")
    @cvsfile.parse_log(ViewLogVisitor.new {|args|
      expand_log(tmpl.node('log'), *args)
    }, ["-r#{rev.to_s}"])

    @cvsfile.checkout(rev) {|contents, a|
      tmpl.param({'contents' => CGI::escapeHTML(contents),
                  'attributes' => CGI::escapeHTML(a.inspect)})
    }

    @cgibuffer.print tmpl.output
  end

  def view_annotate(rev)
    tmpl = HTML::Template.new("#{HTML_TEMPLATE_DIR}/view_annotate.html")
    n = tmpl.node('line')
    revlen = rev.to_s.length + 1
    @cvsfile.fullannotate(rev) {|line, date1, rev1, author, rev2, date2|
      h = {'contents' => CGI::escapeHTML(line),
	   'date1' => date1.strftime('%Y/%m/%d'),
	   'rev1' => rev1.to_s.ljust(revlen),
	   'author' => CGI::escapeHTML(author).center(8),
	   'rev2' => rev1.to_s.ljust(revlen)
      }
      h['date2'] = date2 ? date2.strftime('%Y/%m/%d') : ' ' * 10
      h['nonewline'] = "\nno newline at last\n" unless /\n\z/ =~ line
      n.param(h)
    }

    @cgibuffer.print tmpl.output
  end
end

ReViz.new.main
