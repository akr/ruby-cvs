#!/usr/local/bin/ruby

# reviz is a CGI program which browse CVS repository like ViewCVS or cvsweb.

require 'cvs'
require 'cgi'

class SBuf
  def initialize
    @bufs = []
    @buf = []
  end

  def <<(string)
    @buf << string
    if 4096 <= @buf.length
      buf = @buf.slice!(0, @buf.length).join
      if i = @bufs.rindex(nil)
        @bufs[i] = @bufs[i+1..-1].join + buf
	@bufs.fill(nil, (i+1)..-1)
      else
        @bufs.unshift(@bufs.join + buf)
	@bufs.fill(nil, 1..-1)
      end
      #STDERR.print @bufs.collect {|s| s && s.length}.inspect, "\n"
    end
  end

  def each
    @bufs.each {|s| yield s if s}
    yield @buf.join
  end
end

class CGIBuffer
  def initialize(cgi)
    @cgi = cgi
    @buf = SBuf.new
    @options = {'type' => 'text/html'}
  end

  def [](k)
    return @options[k]
  end

  def []=(k, v)
    @options[k] = v
  end

  def print(*ss)
    ss.each {|s| @buf << s}
  end

  def catch
    begin
      yield self
    rescue
      ex = $!
      @cgi.print @cgi.header('text/plain')
      @cgi.print ex.to_s, "\n"
      ex.backtrace.each {|s|
        @cgi.print s, "\n"
      }
      @cgi.print "\n"
      @buf.each {|s| @cgi.print s}
      return
    end

    @cgi.print @cgi.header(@options)
    @buf.each {|s| @cgi.print s}
  end

  def xhtml
    print <<'End'
<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
End
    yield
    print <<'End'
</html>
End
  end

  def elt(tag, attr={})
    print "<#{tag}"
    attr.each {|k, v|
      print " #{k}=\"#{CGI::escapeHTML(v)}\""
    }
    if block_given?
      print ">"
      yield
      print "</#{tag}>"
    else
      print " />"
    end
  end

  def element(tag, attr={}, &block)
    elt(tag, attr, &block)
    print "\n"
  end

end

class ReViz
  CVSROOT_LIST = [
    ['main', '/home/akr/.cvsroot'],
    ['cvsroot2', '/home/akr/.cvsroot2'],
  ]

  StickyParameter = {
    'cvsroot' => CVSROOT_LIST[0][0],
    'hideattic' => nil,
    'sortby' => nil,
    'logsort' => nil,
    'diff_format' => nil,
    'only_with_tag' => nil,
  }

  def initialize
    @cgi = CGI.new
    @cgibuffer = CGIBuffer.new(@cgi)
  end

  def error(msg)
    @cgi.out("text/plain") {msg}
    exit 0
  end

  def init_cvsroot
    d = @cgi['cvsroot']
    if d.empty?
      cvsroot = CVSROOT_LIST[0][1]
    elsif (d = CVSROOT_LIST.assoc(d[0]))
      cvsroot = d[1]
    else
      error("unknown cvsroot")
    end
    @cvsroot = CVS.create(cvsroot)


    path_info = (@cgi.path_info || '/')
    path = []
    path_info.scan(/[^\/]+/) {|name|
      next if name == '.' || name == '..'
      path << name
    }

    @cvsdir = @cvsroot.top_dir
    @cvsfile = nil
    if path_info =~ /\/\z/
      path.each {|name| @cvsdir = @cvsdir.simple_dir(name)}
    else
      path[0..-2].each {|name| @cvsdir = @cvsdir.simple_dir(name)}
      @cvsfile = @cvsdir.simple_file(path[-1])
    end
  end

  def init_url
    @url_base = @cgi.script_name
    @url_params = {}
    StickyParameter.each {|k,v|
      if @cgi.has_key? k
	@url_params[k] = @cgi[k][0]
      else
	@url_params[k] = v
      end
    }
  end

  def url(path_info, extra_params={}, fragment=nil)
    params = @url_params.dup
    if extra_params
      extra_params.each {|k,v|
	if v == nil
	  params.delete(k)
	else
	  params[k] = v
	end
      }
    end
    StickyParameter.each {|k,v|
      params.delete(k) if params[k] == v
    }

    result = @url_base.dup
    if path_info
      result << '/' << path_info
    end
    unless params.empty?
      result << '?' << params.keys.sort.collect {|k|
                         "#{k}=#{CGI::escape(params[k])}"
		       }.join('&')
    end
    if fragment != nil
      result << '#' << fragment
    end
    return result
  end

  def main
    @cgibuffer.catch {
      init_cvsroot
      init_url

      if @cvsfile
	if @cgi.has_key? 'rev'
	  view_checkout(CVS::Revision.create(@cgi['rev']))
	else
	  view_log
	end
      else
	view_directory
      end
    }
  end

  def list_repository
    @cgibuffer.xhtml {
      @cgibuffer.element('head') {
	@cgibuffer.element('title') {
	  @cgibuffer.print 'repository list'
	}
      }
      @cgibuffer.element('body') {
	@cgibuffer.element('ul') {
	  CVSROOT_LIST.each {|name, *rest|
	    @cgibuffer.element('li') {
	      @cgibuffer.element('a', {'href'=>url(nil, {'cvsroot'=>name})}) {
		@cgibuffer.print name
	      }
	    }
	  }
	}
      }
    }
  end

  def view_directory
    @cgibuffer.xhtml {
      @cgibuffer.element('head') {
	@cgibuffer.element('title') {
	  @cgibuffer.print 'directory'
	}
      }
      @cgibuffer.element('body') {
	unless (listdir = @cvsdir.listdir).empty?
	  listdir.sort! {|a,b| a.path <=> b.path}
	  @cgibuffer.element('h2') { @cgibuffer.print "directory" }
	  @cgibuffer.element('ul') {
	    listdir.each {|subdir|
	      @cgibuffer.element('li') {
		@cgibuffer.element('a',
		  {'href'=>url(subdir.path + '/')}) {
		  @cgibuffer.print subdir.path
		}
	      }
	    }
	  }
	end
	unless (listfile = @cvsdir.listfile).empty?
	  listfile.sort! {|a,b| a.name <=> b.name}
	  @cgibuffer.element('h2') { @cgibuffer.print "file" }
	  @cgibuffer.element('ul') {
	    listfile.each {|file|
	      @cgibuffer.element('li') {
		@cgibuffer.element('a',
		  {'href'=>url(file.path)}) {
		  @cgibuffer.print file.path
		}
	      }
	    }
	  }
	end
      }
    }
  end

  def view_log
    @cgibuffer.xhtml {
      @cgibuffer.element('head') {
	@cgibuffer.element('title') {
	  @cgibuffer.print 'file'
	}
      }
      @cgibuffer.element('body') {
	@cvsfile.parse_log(ViewLogVisitor.new {|args|
	  print_log(*args)
	  @cgibuffer.element('hr')
	})
      }
    }
  end
  class ViewLogVisitor < CVS::Visitor
    def initialize(&block)
      @block = block
      @rev2sym = {}
      @rev2sym.default = [].freeze
    end
    def symbol(sym, rev)
      unless @rev2sym.has_key? rev
        @rev2sym[rev] = []
      end
      @rev2sym[rev] << sym
    end
    def delta_rlog(rev, locked_by, date, author, state,
                   add, del, branches, message)
      #p [rev, locked_by, date, author, state, add, del, branches, message]
      @block.call(rev, locked_by, date, author, state,
                  add, del, branches, message, @rev2sym[rev])
    end
  end

  def print_log(rev, locked_by, date, author, state,
                add, del, branches, message, tags)

    @cgibuffer.element('p') {
      tags.each {|tag| @cgibuffer.element('a', {'name'=>tag}) {}}
      @cgibuffer.element('a', {'name'=>"rev#{rev.to_s}"}) {}
      @cgibuffer.print 'Revision '
      @cgibuffer.elt('b') {
	@cgibuffer.elt('a',
	  {'href'=>url(@cvsfile.path, {'rev'=>rev.to_s})}) {
	  @cgibuffer.print rev.to_s
	}
      }
      @cgibuffer.print ', '
      @cgibuffer.element('i') {@cgibuffer.print CGI::escapeHTML(date.to_s)}
      @cgibuffer.print ' by '
      @cgibuffer.element('i') {@cgibuffer.print CGI::escapeHTML(author)}
    }
    @cgibuffer.element('pre') {@cgibuffer.print CGI::escapeHTML(message)}
  end

  def view_checkout(rev)
    @cgibuffer.xhtml {
      @cgibuffer.element('head') {
	@cgibuffer.element('title') {
	  @cgibuffer.print 'checkout'
	}
      }
      @cgibuffer.element('body') {
	@cvsfile.parse_log(ViewLogVisitor.new {|args|
	  print_log(*args)
	}, ["-r#{rev.to_s}"])
	@cvsfile.checkout(rev) {|contents, a|
	  @cgibuffer.element('p') {@cgibuffer.print CGI::escapeHTML(a.inspect)}
	  @cgibuffer.element('hr')
	  @cgibuffer.element('pre') {
	    @cgibuffer.print CGI::escapeHTML(contents)
	  }
	}
      }
    }
  end

end

ReViz.new.main
